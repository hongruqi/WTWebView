//
//  StyleKit.m
//
//  Created on 11/08/2017.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

@import UIKit;
#import "WTGoTopImage.h"



@implementation WTGoTopImage


#pragma mark - Canvas Drawings

//! Page 1

+ (void)drawPage1 {
    //! General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //! ic_go_top@2x
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 2, 2);
        
        //! Mask
        UIBezierPath *mask = [UIBezierPath bezierPathWithRect:CGRectMake(0, 0, 16, 16)];
        
        //! ic_go_top@2x
        // Warning: New symbols are not supported.
        
        CGContextRestoreGState(context);
    }
}

//! Symbols

+ (void)drawIc_go_top2x {
    [WTGoTopImage drawIc_go_top2xWithFrame:CGRectMake(0, 0, 20, 20) resizing:StyleKitResizingBehaviorAspectFit];
}
+ (void)drawIc_go_top2xWithFrame:(CGRect)targetFrame resizing:(StyleKitResizingBehavior)resizing {
    //! General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //! Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = StyleKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 20, 20), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 20, resizedFrame.size.height / 20);
    
    //! ic_go_top@2x
    // Warning: Image layers are not supported.
    
    CGContextRestoreGState(context);
}


#pragma mark - Canvas Images

//! Symbols

+ (UIImage *)image{
    static UIImage * image = nil;
    if (image != nil)
        return image;
    
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(20, 20), NO, 0);
    [WTGoTopImage drawIc_go_top2x];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}


#pragma mark - Resizing Behavior

CGRect StyleKitResizingBehaviorApply(StyleKitResizingBehavior behavior, CGRect rect, CGRect target) {
    if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero)) {
        return rect;
    }
    
    CGSize scales = CGSizeZero;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);
    
    switch (behavior) {
        case StyleKitResizingBehaviorAspectFit: {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case StyleKitResizingBehaviorAspectFill: {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case StyleKitResizingBehaviorStretch:
            break;
        
        case StyleKitResizingBehaviorCenter: {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }
    
    CGRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}


@end
